// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique @db.Text
  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id       String @id @default(uuid())
  name     String
  url      String @db.Text
  courseId String

  // course relation to the "Courses" model, which will be used to create a foreign key
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// chapters model
model Chapter {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  videoUrl    String?  @db.Text
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  muxData     MuxData?
  courseId    String
  // course relation to the "Courses" model, which will be used to create a foreign key
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  playbackId String?
  assetId    String

  chapterId String @unique

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id        String @id @default(uuid())
  userId    String
  chapterId String

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

// testing subscription plan
model WebhookEvent {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            Json
  processingError String?

  @@map("webhookEvent")
}

model Plan {
  id                 Int     @id @default(autoincrement())
  productId          Int
  productName        String?
  variantId          Int     @unique
  name               String
  description        String?
  price              String
  isUsageBased       Boolean @default(false)
  interval           String?
  intervalCount      Int?
  trialInterval      String?
  trialIntervalCount Int?
  sort               Int?
}

model Subscription {
  id                 Int     @id @default(autoincrement())
  lemonSqueezyId     String  @unique
  orderId            Int
  name               String
  email              String
  status             String
  statusFormatted    String
  renewsAt           String?
  endsAt             String?
  trialEndsAt        String?
  price              String
  isUsageBased       Boolean @default(false)
  isPaused           Boolean @default(false)
  subscriptionItemId Int     @default(autoincrement())

  @@map("subscription")
}

model StripeCustomer {
  id     String @id @default(uuid())
  userId String @unique

  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
